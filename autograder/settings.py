# CSRF trusted origins for local frontend
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]
"""
Django settings for autograder project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = config("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG") == 'True'

ALLOWED_HOSTS = ["tjctgrader.org", "localhost", "127.0.0.1", "autograder"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # api apps
    "rest_framework",
    "autograder.apps.index",
    "autograder.apps.oauth",
    "autograder.apps.contests",
    "autograder.apps.problems",
    "autograder.apps.runtests",
    "autograder.apps.rankings",
    "autograder.apps.tjioi",
    "social_django",
    "django_user_agents",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
    "autograder.middleware.mobile.MobileRedirectMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

SESSION_ENGINE = "django.contrib.sessions.backends.db"

ROOT_URLCONF = "autograder.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "autograder/templates/"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "debug": True,
            # Explicitly register Django's core template tag libraries to avoid missing tags like 'endif'.
            "builtins": [
                "django.template.defaulttags",
                "django.template.defaultfilters",
            ],
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
                "autograder.context_processors.active_nav_item",
            ],
        },
    },
]

WSGI_APPLICATION = "autograder.wsgi.application"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO" if DEBUG else "WARNING",
    },
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "autograder",
        "USER": "postgres",
        "PASSWORD": "postgres" if DEBUG else config("PGPASSWORD"),
        "HOST": "postgres" if DEBUG else "localhost",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "index.GraderUser"

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "autograder" / "static"]

STATIC_ROOT = (
    BASE_DIR / "collected_static"
)  # only needed for collectstatic in production

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",  # For your STATICFILES_DIRS
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",  # For admin and other app static
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TJIOI_MODE = False

CURRENT_SEASON = 2025

CODERUNNER_URL = "http://coderunner:8080/" if DEBUG else "http://10.150.0.9/"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]

if TJIOI_MODE:
    AUTHENTICATION_BACKENDS.insert(
        0, "autograder.apps.tjioi.backend.TJIOIAuthenticationBackend"
    )
else:
    AUTHENTICATION_BACKENDS.insert(0, "autograder.apps.oauth.backend.IonOauth2")

LOGIN_REDIRECT_URL = "http://localhost:5173/profile"
LOGOUT_REDIRECT_URL = "http://localhost:5173/"

LOGIN_URL = "/login/ion/"

SOCIAL_AUTH_ION_KEY = config("SOCIAL_AUTH_ION_KEY")
SOCIAL_AUTH_ION_SECRET = config("SOCIAL_AUTH_ION_SECRET")
SOCIAL_AUTH_ION_REDIRECT_URI = config("SOCIAL_AUTH_ION_REDIRECT_URI", "http://localhost:3000/complete/ion/")

# Additional social auth settings
SOCIAL_AUTH_REDIRECT_IS_HTTPS = False
SOCIAL_AUTH_LOGIN_REDIRECT_URL = "http://localhost:5173/profile"
SOCIAL_AUTH_LOGIN_URL = "/login/ion/"

SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "social_core.pipeline.social_auth.social_user",
    "social_core.pipeline.user.get_username",
    "social_core.pipeline.user.create_user",
    "autograder.apps.oauth.pipeline.save_ion_profile_data",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.social_auth.load_extra_data",
    "social_core.pipeline.user.user_details",
)


CELERY_TIMEZONE = "America/New_York"
CELERY_BROKER_URL = "redis://redis:6379/0" if DEBUG else "redis://127.0.0.1:6379"

CELERY_ACCEPT_CONTENT = ["json", "pickle"]
CELERY_TASK_SERIALIZER = "pickle"

CELERY_TASK_TIME_LIMIT = 30 * 60

CELERY_QUEUES = {
    'default': {},
    'coderunner_queue': {
        'exchange': 'coderunner',
        'routing_key': 'coderunner'
    },
}

CELERY_TASK_DEFAULT_QUEUE = 'default'

SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_SSL_REDIRECT = False

# CORS settings for frontend communication
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

CORS_ALLOW_CREDENTIALS = True

# Session settings for cross-origin
SESSION_COOKIE_SAMESITE = 'Lax'  # Allow cross-origin requests
CSRF_COOKIE_SAMESITE = 'Lax'

if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')